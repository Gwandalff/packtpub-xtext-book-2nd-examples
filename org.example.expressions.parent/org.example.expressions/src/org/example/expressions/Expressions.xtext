grammar org.example.expressions.Expressions with org.eclipse.xtext.common.Terminals

import "http://www.example.org/expressions/Expressions"

ExpressionsModel:
	statements=Statements;
	
Statements:
	{Statements} elements+=AbstractElement*;

AbstractElement:
	Variable | EvalExpression | FunDefinition | Loop | Condition;

Loop:
	'loop' expression=Expression body=Block
;

Condition:
	'if' expression=Expression ifz=Block ('else' elsez=Block)?
;
	
Block:
	'{' statements=Statements '}'
;
	
FunDefinition:
	InlineFunction | ComplexFunction;
	
InlineFunction: 
	'let' name=ID '(' (varNames+=Parameter (',' varNames+=Parameter)*)? ')' '=>' expression=Expression
;

ComplexFunction : 
	'let' name=ID '(' (varNames+=Parameter (',' varNames+=Parameter)*)? ')' body=Block
;

VarOrParam:
	Variable|Parameter;

Parameter:
	type=("String"|"bool"|"int") name=ID;
	
Variable:
	'var' name=ID '=' expression=Expression;

EvalExpression:
	'eval' expression=Expression;

Expression: Or;

Or returns Expression:
	And (
		{Or.left=current} "||" right=And
	)*;

And returns Expression:
	Equality (
		{And.left=current} "&&" right=Equality
	)*;

Equality returns Expression:
	Comparison (
		{Equality.left=current} op=("==" | "!=")
		right=Comparison
	)*;

Comparison returns Expression:
	PlusOrMinus (
		{Comparison.left=current} op=(">=" | "<=" | ">" | "<")
		right=PlusOrMinus
	)*;

PlusOrMinus returns Expression:
	MulOrDiv (
		({Plus.left=current} '+' | {Minus.left=current} '-')
		right=MulOrDiv
	)*;

MulOrDiv returns Expression:
	Primary (
		({MulOrDiv.left=current} op=('*' | '/'))
		right=Primary
	)*;

Primary returns Expression:
	'(' Expression ')' |
	{Not} "!" expression=Primary |
	Atomic;

Atomic returns Expression:
	FunCall |
	{IntConstant} value=INT |
	{StringConstant} value=STRING |
	{BoolConstant} value=('true' | 'false') |
	{VarOrParamRef} variable=[VarOrParam];

FunParam:
	{FunParamExp} expr=Expression |
	{FunParamCapture } ':' variable=[Variable];

FunCall:
	function=[FunDefinition] '(' (params+=FunParam (',' params+=FunParam)*)? ')';