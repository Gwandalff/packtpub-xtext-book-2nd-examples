behavior expressions;

use org.example.expressions.services.MapService;
use org.example.expressions.services.LogService;

open class ExpressionsModel {
	
	@main
	def void main(){
		self.interpret().log();
	}
	
	def expressions::Value interpret() {
		expressions::Context context := expressions::Context.create();
		context.values.put('default', expressions::IntValue.create());
		result := null;
		for(element in self.statements.elements){
			result := element.interpret(context);
		}
	}
}

open class Variable {
	def expressions::Value interpret(expressions::Context context) {
		result := self.expression.interpret(context);
		context.values.put(self.name, result);
	}
}

open class FunDefinition {
	def expressions::Value interpret(expressions::Context context) {
		result := null;
	}
}

open class EvalExpression {
	def expressions::Value interpret(expressions::Context context) {
		result := self.expression.interpret(context);
		result.log;
	}
}

open class Condition {
	def expressions::Value interpret(expressions::Context context) {
		expressions::BoolValue cond := self.expression.interpret(context);
		if(cond.isValue()){
			self.ifz.interpret(context);
		} else {
			if(self.elsez.oclIsKindOf(expressions::Block)){
				self.elsez.interpret(context);
			}
		}
		result := null;
	}
}

open class Loop {
	def expressions::Value interpret(expressions::Context context) {
		while(self.expression.interpret(context).oclAsType(expressions::BoolValue).isValue()){
			self.body.interpret(context);
		}
		result := null;
	}
}

open class AbstractElement {
	def expressions::Value interpret(expressions::Context context) {
		result := null;
		if(self.oclIsKindOf(expressions::Variable)){
			expressions::Variable var := self.oclAsType(expressions::Variable);
			result := var.expression.interpret(context);
			context.values.put(var.name, result);
		}
		if(self.oclIsKindOf(expressions::FunDefinition)){ 
			result := null;
		}
		if(self.oclIsKindOf(expressions::EvalExpression)){
			expressions::EvalExpression eval := self.oclAsType(expressions::EvalExpression);
			result := eval.expression.interpret(context);
		}
		if(self.oclIsKindOf(expressions::Condition)){
			expressions::Condition condition := self.oclAsType(expressions::Condition);
			expressions::BoolValue cond := condition.expression.interpret(context);
			if(cond.isValue()){
				condition.ifz.interpret(context);
			} else {
				if(condition.elsez.oclIsKindOf(expressions::Block)){
					condition.elsez.interpret(context);
				}
			}
			result := null;
		}
		if(self.oclIsKindOf(expressions::Loop)){
			expressions::Loop loop := self.oclAsType(expressions::Loop);
			while(loop.expression.interpret(context).oclAsType(expressions::BoolValue).isValue()){
				loop.body.interpret(context);
			}
			result := null;
		}
	}
}

open class Block {
	def expressions::Value interpret(expressions::Context context) {
		result := null;
		for(element in self.statements.elements){
			result := element.interpret(context);
		}
	}
}

open class FunParam {
	def expressions::Value interpret(expressions::Context context) {
		if(self.oclIsKindOf(expressions::FunParamExp)){
			expressions::FunParamExp funParamExp := self.oclAsType(expressions::FunParamExp);
			result := funParamExp.interpret(context);
		} else {
			expressions::FunParamCapture funParamCapture := self.oclAsType(expressions::FunParamCapture);
			result := funParamCapture.interpret(context);
		}
	}
}

open class FunParamExp {
	def expressions::Value interpret(expressions::Context context) {
		result := self.expr.interpret(context);
	}
}

open class FunParamCapture {
	def expressions::Value interpret(expressions::Context context) {
		result := context.values.get(self.variable.name);
	}
}

open class FunCall {
	def expressions::Value interpret(expressions::Context context) {
		expressions::Context funContext := expressions::Context.create();
		result := null;
		// create the new context with params
		int i := 0;
		while(i < self.function.varNames.size()){
			funContext.values.put(self.function.varNames.get(i).name, self.params.get(i).interpret(context));
			i := i + 1;
		}
		
		//interpret
		if(self.function.oclIsKindOf(expressions::InlineFunction)){
			expressions::InlineFunction f := self.function;
			result := f.expression.interpret(funContext);
		}
		if(self.function.oclIsKindOf(expressions::ComplexFunction)){
			expressions::ComplexFunction f := self.function;
			result := f.body.interpret(funContext);
		}
		
		// update captured variables in the caller context
		i := 0;
		while(i < self.params.size()){
			expressions::FunParam param := self.params.get(i);
			if(param.oclIsKindOf(expressions::FunParamCapture)){
				expressions::FunParamCapture capture := param.oclAsType(expressions::FunParamCapture);
				context.values.put(capture.variable.name, funContext.values.get(self.function.varNames.get(i).name));	
			}
			i := i + 1;
		}
	}
}

open class VarOrParamRef {
	def expressions::Value interpret(expressions::Context context) {
		result := context.values.get(self.variable.name);
	}
}

open class Equality {
	def expressions::Value interpret(expressions::Context context) {
		expressions::BoolValue ret := expressions::BoolValue.create();
		if (self.op = '==') {
			ret.value := self.left. interpret(context) == self.right.interpret(context);
		} else {
			ret.value := self.left. interpret(context) != self.right.interpret(context);
		}
		result := ret;
	}
}

open class Comparison {
	def expressions::Value interpret(expressions::Context context) {
		expressions::BoolValue ret := expressions::BoolValue.create();
		expressions::Value type  := self.left.interpret(context);
		if (type.oclIsKindOf(expressions::StringValue)) {
			String left   := type.oclAsType(expressions::StringValue).value;
			String right  := self.right.interpret(context).oclAsType(expressions::StringValue).value;
			if(self.op == '<' ){ ret.value := left.compareTo(right) <  0;}
			if(self.op == '>' ){ ret.value := left.compareTo(right) >  0;}
			if(self.op == '>='){ ret.value := left.compareTo(right) >= 0;}
			if(self.op == '<='){ ret.value := left.compareTo(right) <= 0;}
			
		} else {
			Integer left   := type.oclAsType(expressions::IntValue).value;
			Integer right  := self.right.interpret(context).oclAsType(expressions::IntValue).value;		
			if(self.op == '<' ){ ret.value := left <  right;}
			if(self.op == '>' ){ ret.value := left >  right;}
			if(self.op == '>='){ ret.value := left >= right;}
			if(self.op == '<='){ ret.value := left <= right;}
		}
		result := ret;
	}
}

open class And {
	def expressions::Value interpret(expressions::Context context) {
		expressions::BoolValue ret := expressions::BoolValue.create();
		expressions::BoolValue l := self.left.interpret(context);
		expressions::BoolValue r := self.right.interpret(context);
		ret.value := l.isValue() and r.isValue();
		result := ret;
	}
}

open class Or {
	def expressions::Value interpret(expressions::Context context) {
		expressions::BoolValue ret := expressions::BoolValue.create();
		expressions::BoolValue l := self.left.interpret(context);
		expressions::BoolValue r := self.right.interpret(context);
		ret.value := l.isValue() or r.isValue();
		result := ret;
	}
}

open class Not {
	def expressions::Value interpret(expressions::Context context) {
		expressions::BoolValue ret := expressions::BoolValue.create();
		ret.value := not self.expression.interpret(context).oclAsType(expressions::BoolValue).isValue();
		result := ret;
	}
}

open class MulOrDiv {
	def expressions::Value interpret(expressions::Context context) {
		expressions::IntValue ret   := expressions::IntValue.create();
		expressions::IntValue left  := self.left.interpret(context);
		expressions::IntValue right := self.right.interpret(context);
		if (self.op == '*'){
			ret.value := left.value * right.value;
		} else {
			ret.value := left.value / right.value;
		}
		result := ret;
	}
}

open class Minus {
	def expressions::Value interpret(expressions::Context context) {
		expressions::IntValue ret := expressions::IntValue.create();
		expressions::IntValue left  := self.left.interpret(context);
		expressions::IntValue right := self.right.interpret(context);
		ret.value := left.value - right.value;
		result := ret;
	}
}

open class Plus {
	def expressions::Value interpret(expressions::Context context) {
		expressions::IntValue ret := expressions::IntValue.create();
		expressions::IntValue left  := self.left.interpret(context);
		expressions::IntValue right := self.right.interpret(context);
		ret.value := left.value + right.value;
		result := ret;
	}
}

open class IntConstant {
	def expressions::Value interpret(expressions::Context context) {
		expressions::IntValue ret := expressions::IntValue.create();
		ret.value := self.value;
		result := ret;
	}
}

open class BoolConstant {
	def expressions::Value interpret(expressions::Context context) {
		expressions::BoolValue ret := expressions::BoolValue.create();
		ret.value := self.value == 'true';
		result := ret;
	}
}

open class StringConstant {
	def expressions::Value interpret(expressions::Context context) {
		expressions::StringValue ret := expressions::StringValue.create();
		ret.value := self.value;
		result := ret;
	}
}

open class IntValue {
	def String toString(){
		result := '' + self.value;
	}
}

open class BoolValue {
	def String toString(){
		result := '' + self.value;
	}
}

open class StringValue {
	def String toString(){
		result := self.value;
	}
}

open class Expression {
	def expressions::Value interpret(expressions::Context context) {
		result := null;
	}
}